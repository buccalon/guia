# Generated by Django 2.0.5 on 2018-07-12 14:18

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('glossary', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Capture',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is an auto set field', primary_key=True, serialize=False, unique=True, verbose_name='Universal Unique Identifier')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Auto set field', verbose_name='Created in')),
                ('title', models.CharField(blank=True, help_text='Ex.: The capture title', max_length=256, null=True, verbose_name='Title')),
            ],
            options={
                'verbose_name': 'Capture',
                'verbose_name_plural': 'Captures',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is an auto set field', primary_key=True, serialize=False, unique=True, verbose_name='Universal Unique Identifier')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='This is an auto set field', verbose_name='Created in')),
                ('id', models.CharField(blank=True, help_text='Institucional Collection Human Identifier', max_length=64, null=True, unique=True, verbose_name='ID')),
                ('id_old', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Legacy Identifiers', null=True, verbose_name='Old IDs')),
                ('title', models.CharField(default='No title collection', help_text='Ex.: The complete photo collection of Sebasti√£o Salgado.', max_length=256, verbose_name='Title')),
                ('slug', models.SlugField(blank=True, help_text='Ex.: complete-collection-sebastiao-salgado', max_length=256, null=True, unique=True, verbose_name='Slug')),
                ('abstract', models.TextField(blank=True, help_text='Ex.: This collection is composed by...', null=True, verbose_name='Abstract')),
                ('full_text', models.TextField(blank=True, help_text='Ex.: All itens in this collection...', null=True, verbose_name='Full Text')),
                ('dimensions', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Feed with information about dimensions', null=True, verbose_name='Dimensions')),
                ('date_start', models.DateField(blank=True, help_text='Choose a start date', null=True, verbose_name='Initial Date')),
                ('date_start_caption', models.CharField(blank=True, help_text='Choose a start date caption', max_length=64, null=True, verbose_name='Initial date caption')),
                ('date_end', models.DateField(blank=True, help_text='Choose an final date', null=True, verbose_name='Final date')),
                ('date_end_caption', models.CharField(blank=True, help_text='Choose a final date caption', max_length=64, null=True, verbose_name='Final date caption')),
                ('items_total', models.PositiveIntegerField(blank=True, help_text='Total collection items', null=True, verbose_name='Total Items')),
                ('items_processed', models.PositiveIntegerField(blank=True, help_text='Total processed items', null=True, verbose_name='Processed Items')),
                ('items_online', models.PositiveIntegerField(blank=True, help_text='Total online collection items', null=True, verbose_name='Online Items')),
                ('access_local_status', models.NullBooleanField(help_text='Is there any local access to the collection?', verbose_name='Local Access Status')),
                ('access_online_status', models.NullBooleanField(help_text='Is there any online access to the collection?', verbose_name='Online Access Status')),
                ('access_link', models.URLField(blank=True, help_text='Do you have some online link access to this collection?', null=True, verbose_name='Access Link')),
                ('location_specific', models.CharField(blank=True, help_text='What is the specific location to this collection?', max_length=256, null=True, verbose_name='Specific Location')),
                ('inventary_status', models.NullBooleanField(help_text='Is there any inventary to this collection?', verbose_name='Inventary Status')),
                ('inventary_last_date', models.DateField(blank=True, help_text='What is the inventary last date?', null=True, verbose_name='Inventary Last Date')),
                ('inventary_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Several data about the inventary', null=True, verbose_name='Inventary Data')),
                ('other_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Other unstructured data of this collection', null=True, verbose_name='Other Data')),
                ('access_condition', models.ForeignKey(blank=True, help_text='Choose the more appropriate access condition to this collection', null=True, on_delete=django.db.models.deletion.SET_NULL, to='glossary.AccessCondition', verbose_name='Access Condition')),
                ('aggregation_type', models.ForeignKey(blank=True, help_text='Choose an Option', null=True, on_delete=django.db.models.deletion.SET_NULL, to='glossary.AggregationType', verbose_name='Aggregation Type')),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': 'Collections',
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is an auto set field', primary_key=True, serialize=False, unique=True, verbose_name='Universal Unique Identifier')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='This is an auto set field', verbose_name='Created in')),
                ('id', models.CharField(blank=True, help_text='Institucional Container Human Identifier', max_length=64, null=True, unique=True, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Ex.: Container of...', max_length=256, null=True, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='Ex.: This container is...', null=True, verbose_name='Description')),
                ('aggregation_type', models.ForeignKey(blank=True, help_text='Container Aggregation Type', null=True, on_delete=django.db.models.deletion.SET_NULL, to='glossary.AggregationType', verbose_name='Aggregation Type')),
                ('container_child', models.ManyToManyField(blank=True, help_text='Choose child containers to aggregate to this one', related_name='_container_container_child_+', to='collection.Container', verbose_name='Child containers')),
                ('description_level', models.ForeignKey(blank=True, help_text='Choose a description level to this container', null=True, on_delete=django.db.models.deletion.SET_NULL, to='glossary.DescriptionLevel', verbose_name='Description level')),
            ],
            options={
                'verbose_name': 'Container',
                'verbose_name_plural': 'Containers',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is an auto set field', primary_key=True, serialize=False, unique=True, verbose_name='Universal Unique Identifier')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='This is an auto set field', verbose_name='Created in')),
                ('id', models.CharField(blank=True, help_text='Institucional Human Identifier', max_length=64, null=True, unique=True, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Ex.: Salgado Negative - 001', max_length=256, verbose_name='Title')),
                ('description', models.TextField(blank=True, help_text='Ex.: Gelatin negative of the first photo...', null=True, verbose_name='Title')),
                ('capture', models.ManyToManyField(blank=True, help_text='Capture(s) taked from this item.', to='collection.Capture', verbose_name='Capture(s)')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
        migrations.CreateModel(
            name='Thumbnail',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='This is an auto set field', primary_key=True, serialize=False, unique=True, verbose_name='Universal Unique Identifier')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='This is an auto set field', verbose_name='Created in')),
                ('title', models.CharField(blank=True, help_text='Ex.: Image title, like "the photographer resting" ', max_length=256, null=True, verbose_name='Title')),
                ('image', models.ImageField(blank=True, help_text='The Image File', null=True, upload_to='', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Thumbnail',
                'verbose_name_plural': 'Thumbnails',
            },
        ),
        migrations.AddField(
            model_name='container',
            name='items',
            field=models.ManyToManyField(blank=True, help_text='Itens that composes the container', to='collection.Item', verbose_name='Items'),
        ),
    ]
